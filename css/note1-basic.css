/* ==========================================
優先權與頁面呈現測試用內容
1. .xxxx：表示要套用於指定的class。
2. #xxxx：表示要套用於指定的id。
3. class命名不要使用底線或dash。
4. 如有小數點，要去掉前面的0。
   - 0.8 >>用 .8 表示
==========================================*/
.t1{
  font-size: 54px;
  color: red;
}

.t2{
  color: blue;
}

#t3{
  color: orange;
}

.box1{
  background-color: orange;
  width: 30px;
  height: 30px;
}

.box2{
  background-color: red;
  width: 30px;
  height: 30px;
}

/* ==========================================
1. 使用*{} 套用於頁面中所有元件
2. 可先設定所有元件為position: relative，方便排列
3. body有預設的padding跟margin，可另外表示=0，讓邊界貼於視窗；高度與寬度可設為100%，讓畫面看起來填滿視窗。
4. 整個網頁固定寬度，超過寬度自動置中：
- 設定一個div包覆網頁內容，設定width:000px;  margin-left:auto;  margin-right: auto;
==========================================*/
* {
  position: relative
}

html,body{
  width: 100%; height: 100%;
  padding: 0px; margin: 0px;
}


/*==========================================
1-1 位置屬性(position, top, right, z-index, display, float等)

position：控制元件在網頁中的位置。
- position: static;  自動排列下來且不可移動。(預設)
- position: relative;  會自動排列下去且可調整偏移。
- position: absolute;  上層元素絕對定位，在上層元素中相對位置（static的元素除外），可以重疊在其他元件。
    >可加上 z-index:1; (代表Z軸，數值越大圖層越前面)
- position: fixed;  視窗絕對定位，不會隨捲軸滾動。
---------------------------------------------
display：設定元件的排列方式
-  display: block;  預設，會斷行且區域填滿整個寬度。
-  display: inline; 同一行排排站。
-  display: inline-block; 同一行，且區域配合內容長度調整。
-  display: flex;  自動排列，用到再說。
-  display: none; 不顯示於頁面上。
-  display: grid; 依照比例/百分比/px進行劃分。
---------------------------------------------
vertical-align：垂直(上下)對齊方式(僅可套用於表格中) 建議用*先將所有元素預設為top。
-  vertical-align: top; 置上對齊。
-  vertical-align :middle; 水平置中對齊。
-  vertical-align: bottom; 置底對齊。
---------------------------------------------
元件水平置中方式(左右)：
- margin-left:auto;  margin-right:auto
---------------------------------------------
元件垂直置中方式(上下)：
1. 行高(line-height)：單行文字適用，不適合多行文字。
2. 表格：多行文字適用。先將區塊設定為表格(display:table;)，再加上"vertical-align:middle;"
3. 虛擬元素：先將區塊設定為inline-block(display:inline-block;)，再加上"vertical-align:middle;"
   但非表格的vertical-align:middle是用兩個相連區塊互相比對，所以要在父元素加上一個虛擬的物件：
     .aaa::before{
        content: "";
        display: inline-block;
        height: 100%;
        vertical-align: middle;
      }
4. absolute：設定元件dispaly:absolute，top:50%，left:50%。
5. flex物件：
   justify-content: center;
   align-items: center;
==========================================*/


/*==========================================
1-2 設定大小(width, height, padding, margin)

padding：內容與框線的間距
- padding: 0px 0px0px 0px; (上右下左）
- padding: 0px 0px;（右上、下左）
---------------------------------------------
margin：框線外部的間距(與其他元件的間距)
- margin: 0px 0px0px 0px; (上右下左）
---------------------------------------------
如是針對div設定間距，則margin上下左右都有，
如是針對行內(span)設定間距，則margin只有左右，上下會被吃掉，可以用display把span改成區塊(block)，就不會有此問題。

==========================================*/

.inner{
  display: block;
  border: solid 2px red;
  padding: 10px 5px 10px 5px;
  margin-left: 10px;
  margin-right: 10px;
  margin-top: 15px;
}

.outer {
  width: 300px;
  height: 200px;
  border: solid 1px blue;
}
/* ==========================================
1-3 背景(border,background等)

border：元件框線，三個參數為 樣式、粗度、顏色。
-  border: solid 1px black;
---------------------------------------------
border-radius：邊框圓角。
- border-radius: 100%;  表示圓形。
---------------------------------------------
box-sizing：框線 border與邊距 padding內含在寬度中。
- box-sizing: content-box; 預設值，實際寬高=所設定的數值＋border＋padding
- box-sizing: bord-box;  框線往內縮，而非往外長，實際寬高=所設定的數值(已包含border和padding)
---------------------------------------------
box-shadow：物件設定陰影，五個參數分別為x軸偏移、y軸偏移、模糊度、內縮外擴、顏色
- box-shadow: 0px 0px 15px -20px rgba(0,0,0,0.2)
---------------------------------------------
background：背景相關設定
- background-image: url("http://....."); 置入背景圖片
- background-size: cover; 背景圖片的大小顯示塞滿物件區域
-  background-position: center top; 設定背景圖片位置，第一個值為X軸，第二個值為Y軸 (此例為中上)
-  background-color: red; 設定背景顏色
---------------------------------------------
顏色
1. 含透明度 rgba(0,0,0,0.1)：顏色RBG+透明度
- color: rgba(0,0,0,0.1)：代表黑色+透明度10%。
2. 漸層 linear-gradient (20deg,#000 0%, #fff 95%)，表示20度角漸層色，0%位置為 #000  ~90%位置為 #FFF。
3. 顏色盡量使用十六進位，小寫。
---------------------------------------------
opacity：物件透明度 (0~1)
-  opacity:1; 物件不透明
-  opacity:0; 物件透明
==========================================*/



/* ==========================================
1-4 設定文字

1. 設定標題文字：h1~h6
2. 設定內文：p
---------------------------------------------
font-family：文字字體(用逗號區隔)
- font-family: Arial, 微軟正黑體;
---------------------------------------------
font-size：文字大小
- font-size: 14px;
---------------------------------------------
font-weight：字體粗細
- font-weight: bold;
- font-weight: 900; 數字，必須是百位數。
---------------------------------------------
letter-spacing：字與字之間的間距
- letter-spacing: 10px;  字與字之間間距為10px。
---------------------------------------------
line-height：文字行距 (需大於文字大小)
- line-height: 16px;
---------------------------------------------
text-align：文字的左右對齊方式。
- text-align:center; 文字置中對齊
==========================================*/


/* ==========================================
設定卷軸(遮罩)
overflow：超過範圍的東西如何處理。
- overflow: scroll; 出現捲軸。
- overflow-Y: scroll; Y軸出現捲軸。(亦可設定為X軸)
-  overflow: hidden; 隱藏掉，等同於遮罩。
==========================================*/


/* ==========================================
偽元素 ::before與::after
可塞入文字於HTML中
::before：文字插入於內文前方
::after：文字插入於內文後方
==========================================*/

.inertword::before{
  content: "<前方前方前方>";
  color: orange;
}

.inertword::after{
  content: "<後方後方後方>";
  color: green;
}

/* ==========================================
ATTR 篩選特定值的內容
1. 過濾HTML內容，HTML中的div有符合oooo=xxx者，都套用此樣式：div[oooo=xxx]
2. 根據HTML內容替換CSS內容，CSS中寫「attr=(ooo)」，表示自動於HTML偵測"ooo=xxx"，在CSS中等於「xxx」
==========================================*/

div[size=big]{
  border: solid 1px red ;
  width: 500px;
  font-size: 24px;
}

div[size=big]::before{
  content: "前方插入文字" attr(size) "-";
}

div[size=small]{
  border: solid 1px green ;
  width: 300px;
}

div[size=small]::before{
  content: "前方插入文字" attr(size) "-";
}

/* ==========================================
display: flex 自動排列，其他數值設定說明
---------------------------------------------

justify-content：主軸對齊 (如水平線有轉90度，則主軸也會一起轉)
靠頭對齊、靠尾對齊、置中、分散對齊、平均分配左右留白
flex-start | flex-end | center | space-between | space-around
---------------------------------------------
align-items：主軸的垂直軸對齊(單行用) (如水平線有轉90度，則垂直軸也會一起轉)
靠頭對齊、靠尾對齊、置中、基礎線對齊、伸展填滿
flex-start | flex-end | center | baseline | stretch
---------------------------------------------
align-content：主軸的垂直軸對齊(多行用)
靠頭對齊、靠尾對齊、置中、分散對齊、平均分配左右留白、伸展填滿
flex-start | flex-end | center | space-between | space-around | stretch
---------------------------------------------
align-self：調整內元件垂直軸的對齊設定，且可以個別設定單一元件的值。(主軸線則不能另外做設定)
靠頭對齊、靠尾對齊、置中、基礎線對齊、伸展填滿
flex-start | flex-end | center | baseline | stretch
---------------------------------------------
flex-direction：改變軸線方向。
水平反轉、轉為垂直、垂直反轉
row | row-reverse | column | column-reverse
---------------------------------------------
flex-wrap：超出範圍時是否換行的屬性，分為換行、不換行、換行時反轉
nowrap | wrap | wrap-reverse
---------------------------------------------
flex-flow：是 flex-direction 與 flex-wrap，直接填上兩個值，用空格區隔。
---------------------------------------------
order：重新定義元件的排列順序，順序會依據數值的大小排列
需輸入數值  ...-2, -1, 0, 1, 2...
==========================================*/



/* ==========================================
display: grid; 依照比例/百分比/px進行劃分
---------------------------------------------

grid-template-columns：劃分直的區域(畫直線)，可交叉使用指定長度、百分比或比例 (3:1的表示方是為：3fr 1fr)
grid-template-rows：劃分橫的區域(畫橫線)，可交叉使用指定長度、百分比或比例 (3:1的表示方是為：3fr 1fr)
---------------------------------------------
grid-template：綜合grid-template-rows與grid-template-columns，用 / 區隔
-  grid-template：40% 100px 2fr 3fr / 50% auto; (先rows再columns)
-  grid-template：repeat(5, 20%) / 50% 50%; (repeat 為重複5次20%)
---------------------------------------------
grid-template-areas：定義各個空間名稱。
grid-area：用grid-template-areas的名稱，設定各空間的CSS樣式。
-  範例如下
  .wrap {
  display: grid;
  grid-template-columns: 200px 50px auto;
  grid-template-rows: 25% auto;
  grid-template-areas:
    "header header header"
    "side  main main";
  height: 100vh;
  width: 940px;
  margin: 0 auto;
  }
  .item-a {
    grid-area: header;
    background-color: purple;
  }
  .item-b {
    grid-area: main;
    background-color: orange;
  }
  .item-c {
    grid-area: side;
    background-color: green;
  }

---------------------------------------------
簡單版的 Grid，如果版型較為簡單，可以直接使用 grid-auto-{ cols or rows}。
如果是簡易的 960 12欄 grid 設定如下即可。
.row {
  display: grid;
  grid-auto-columns: 60px; (每一欄60px)
  grid-auto-flow: column; (水平排列|||)
  grid-gap: 20px;  (間隔為20px)
  width: 940px; (整體寬度)
  min-height: 100vh;
  margin: 0 auto; (置中對齊)
}
---------------------------------------------
設定物件所佔的空間位置，Column 及 Row 所到的起始點及終點，
column的起點與終點：grid-column-start、grid-column-end
row的起點與終點：grid-row-start、grid-row-end

可輸入的值：
數字：指定第幾條欄線，例如：start為1、end為4，表示物件所占空間為第1條欄線至第2條。
span+數字：指定跨越幾格，例如：start為2、end為span 2，表示物件所占空間為第2條線至往右兩格。
span+grid 名稱：物件所在的 grid。
auto：自動填滿剩餘空間。
---------------------------------------------
grid-column, grid-row：上述項目的縮寫，使用斜線 (/) 隔開屬性
 - grid-column: 1/ 6;
 - grid-row: 2/ span 2;
---------------------------------------------
grid-area：上述項目的縮寫，使用斜線 (/) 隔開屬性，
順序為：row-start/ column-start / row-end/ column-end
 - grid-area: 2 / 2 / 4/ 4;

==========================================*/



/*==========================================
float 浮動排版
---------------------------------------------
float：排列方式為浮動區塊
- float: left/ right;  為浮動區塊，並靠左/右對齊排列，有類似文繞圖的效果。
---------------------------------------------
clear：清除指定區塊左右兩邊的浮動區塊。
- clear: left/ right;  清除該區塊左/右的浮動區塊(即左/右邊不要有浮動區塊，自己往下排)
- clear: both;  清除該區塊左與右邊的浮動區塊(即兩邊都不要有浮動區塊，自己往下排)
---------------------------------------------
設定區塊為float後，該區塊會浮起來：
1. 當子元素都是浮動，則父元素的高度會消失。
2. 緊接在浮動區塊的其他元素會跑位。
>>解決方式
1. 高度
2. overflow：父元素加上「overflow:auto;」，超出範圍時自動補滿長寬。
3. clearfix：最常使用。父元素加上一個class「clearfix」，填入CSS「clear:both;」，如下：
  clearfix::after｛
    content: "";
    display: block;
    clear: both;
  ｝
  (clear:both;，表示清除float-left與float-right屬性的影響。)

==========================================*/

/*==========================================
刪除li的預設樣式點點：
- list-style: none;


==========================================*/
